Object subclass: #CuOOra	instanceVariableNames: 'usuarios topicos'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial'!!CuOOra commentStamp: 'Vic 6/23/2019 18:38' prior: 0!Tecnicas y Herramientas 2019 - TP1 - Red Social CuOOraClase CuOOra: clase de aplicacion!!CuOOra methodsFor: 'initialization' stamp: 'Victor 6/2/2019 22:18'!initialize 	"initialize de clase CuOOra"	topicos  := OrderedCollection new. 	usuarios   := OrderedCollection new.  	! !!CuOOra methodsFor: 'accessing' stamp: 'Vic 6/28/2019 19:29'!obtenerTodosLosTopicos	^ topicos! !!CuOOra methodsFor: 'accessing' stamp: 'Vic 6/28/2019 19:30'!obtenerTodosLosUsuarios	^ usuarios! !!CuOOra methodsFor: 'accessing' stamp: 'Vic 6/28/2019 19:22'!agregarTopico: unTopico	topicos add:  unTopico.! !!CuOOra methodsFor: 'accessing' stamp: 'Vic 6/28/2019 19:30'!agregarUsuario: unUsuario	usuarios add:  unUsuario.! !Object subclass: #Entrada	instanceVariableNames: 'usuario fechaAlta descripcion votos'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial'!!Entrada commentStamp: 'Vic 6/23/2019 18:40' prior: 0!Tecnicas y Herramientas 2019 - TP1 - Red Social CuOOraClase Entrada: clase abstracta para implemetar las clases pregunta y respuesta!!Entrada methodsFor: 'initialization' stamp: 'Vic 6/30/2019 22:12'!initialize 	"initialize de clase Entrada"	descripcion  := ''. 	fechaAlta  := DateAndTime now.  	votos  := OrderedCollection new.		! !!Entrada methodsFor: 'entrada' stamp: 'Vic 6/30/2019 22:10'!agregarVoto: unVoto	"Agrega un voto a la entrada"		 votos add: unVoto .	! !!Entrada methodsFor: 'entrada' stamp: 'Vic 7/16/2019 22:27'!contarVotos	"devuelve los votos de una entrada"	|cantVotos votosPositivos votosNegativos|	cantVotos :=0.	votosPositivos := votos count: [:a | a esPositivo]. 	votosNegativos := votos count: [:a | a esPositivo not].	cantVotos := votosPositivos - votosNegativos.	^cantVotos.! !!Entrada methodsFor: 'accessing' stamp: 'Victor 5/26/2019 09:23'!usuario: unUsuario	"setter de usuario"	usuario := unUsuario  .! !!Entrada methodsFor: 'accessing' stamp: 'Victor 6/6/2019 19:39'!usuario	^ usuario! !!Entrada methodsFor: 'accessing' stamp: 'Vic 6/29/2019 15:18'!descripcion	^ descripcion ! !!Entrada methodsFor: 'accessing' stamp: 'Victor 5/26/2019 09:27'!descripcion: unaDescripcion	"setter de descripcion"	descripcion := unaDescripcion .! !!Entrada methodsFor: 'accessing' stamp: 'Vic 6/29/2019 15:13'!fechaAlta	^ fechaAlta ! !Entrada subclass: #Pregunta	instanceVariableNames: 'titulo topicos respuestas'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial'!!Pregunta commentStamp: 'Vic 6/23/2019 18:40' prior: 0!Tecnicas y Herramientas 2019 - TP1 - Red Social CuOOraClase Pregunta!!Pregunta methodsFor: 'accessing' stamp: 'Victor 6/2/2019 20:15'!titulo	^ titulo! !!Pregunta methodsFor: 'accessing' stamp: 'Victor 6/2/2019 09:05'!respuestas	^ respuestas! !!Pregunta methodsFor: 'accessing' stamp: 'Victor 5/26/2019 09:40'!titulo: unTitulo	"setter de titulo"	titulo:= unTitulo .! !!Pregunta methodsFor: 'accessing' stamp: 'Vic 7/20/2019 19:29'!agregarRespuesta: anObject	respuestas add:  anObject! !!Pregunta methodsFor: 'accessing' stamp: 'Victor 5/26/2019 15:09'!topicos: unTopico	"agrega un t√≥pico a la pregunta"	topicos add: unTopico .! !!Pregunta methodsFor: 'initialization' stamp: 'Victor 6/9/2019 22:51'!initialize 	"initialize de clase Entrada"	super initialize.	titulo  := ''.	usuario := ''.	topicos := OrderedCollection new.	respuestas  := OrderedCollection new. 	! !!Pregunta methodsFor: 'pregunta' stamp: 'Victor 6/6/2019 19:47'!borrarRespuestas	"borrar todas las respuestas de una pregunta"	self respuestas removeAll.	! !!Pregunta methodsFor: 'pregunta' stamp: 'Vic 6/15/2019 23:41'!obtenerRespuestas	"devuelve todas las respuestas de una pregunta ordenadas por cantidad de likes"	^respuestas  asSortedCollection: [ :a :b | a contarVotos > b contarVotos  ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pregunta class	instanceVariableNames: ''!!Pregunta class methodsFor: 'initialization' stamp: 'Vic 7/22/2019 19:56'!descripcion: unaDescripcion usuario: unUsuario titulo: unTitulo topico: unTopico	"Constructor de la clase Pregunta"	| preg |				preg := self new.			preg usuario: unUsuario .			preg titulo: unTitulo .			preg topicos: unTopico .			preg descripcion: unaDescripcion  .			unTopico preguntas: preg.			unUsuario preguntas: preg.			^preg.				! !Entrada subclass: #Respuesta	instanceVariableNames: 'pregunta'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial'!!Respuesta commentStamp: 'Vic 6/23/2019 18:40' prior: 0!Tecnicas y Herramientas 2019 - TP1 - Red Social CuOOraClase Respuesata: permite responder una pregunta dada.!!Respuesta methodsFor: 'accessing' stamp: 'Victor 5/30/2019 22:10'!pregunta: unaPregunta	"setter de preunta"	pregunta := unaPregunta .! !!Respuesta methodsFor: 'accessing' stamp: 'Vic 6/30/2019 18:59'!pregunta	"getter de preunta"	^ pregunta .! !!Respuesta methodsFor: 'initialization' stamp: 'Vic 6/15/2019 23:35'!initialize 	"initialize de clase Entrada"	super initialize.	descripcion := ''.	fechaAlta := DateAndTime now.	usuario := ''.	pregunta := ''.		! !!Respuesta methodsFor: 'respuesta' stamp: 'Vic 7/22/2019 19:44'!estaEntreLasMejores	"devuelve verdadero si la respuesta tiene mas likes que el promedio de repuestas de la pregunta."| sum prom| 	prom := 0.	sum:= 0.	sum := pregunta respuestas sumNumbers: [ :a | a contarVotos ].	prom := sum / pregunta respuestas size . 	^ (prom < self contarVotos )  .	 	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Respuesta class	instanceVariableNames: ''!!Respuesta class methodsFor: 'accesing' stamp: 'Vic 7/22/2019 19:56'!pregunta: unaPregunta usuario: unUsuario descripcion: unaDescripcion	"Constructor de la clase Respuesta"	| resp |			resp := self new.			resp usuario: unUsuario .			resp pregunta: unaPregunta  .			resp descripcion: unaDescripcion  .			unaPregunta agregarRespuesta: resp.			unUsuario agregarRespuesta: resp.			^resp.				! !Object subclass: #Topico	instanceVariableNames: 'titulo descripcion preguntas'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial'!!Topico commentStamp: 'Vic 6/23/2019 18:39' prior: 0!Tecnicas y Herramientas 2019 - TP1 - Red Social CuOOraClase Topico: un topico es un tema en particular sobre el cual se hacen preguntas y respuestas.!!Topico methodsFor: 'topico' stamp: 'Vic 6/28/2019 20:49'!obtenerPreguntas	"devuelve todas las preguntas del topico" 	^self preguntas .	! !!Topico methodsFor: 'accessing' stamp: 'Victor 5/26/2019 18:00'!titulo	^ titulo! !!Topico methodsFor: 'accessing' stamp: 'Victor 6/1/2019 20:33'!preguntas: anObject	preguntas add:  anObject.! !!Topico methodsFor: 'accessing' stamp: 'Victor 6/1/2019 20:29'!preguntas	^ preguntas! !!Topico methodsFor: 'accessing' stamp: 'Victor 5/24/2019 22:37'!titulo: unTitulo	"setter de Titulo"	titulo := unTitulo  .! !!Topico methodsFor: 'accessing' stamp: 'Victor 5/26/2019 18:00'!descripcion	^ descripcion! !!Topico methodsFor: 'accessing' stamp: 'Victor 5/26/2019 18:01'!descripcion: unaDescripcion	"setter de descripcion"	descripcion := unaDescripcion .! !!Topico methodsFor: 'initialization' stamp: 'Victor 6/1/2019 20:33'!initialize 	"initialize de clase Topico"	descripcion  := ''. 	titulo  := ''.  	preguntas := OrderedCollection new.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Topico class	instanceVariableNames: ''!!Topico class methodsFor: 'initialization' stamp: 'Vic 6/28/2019 20:37'!titulo: unTitulo descrip: unaDescripcion 	"Constructor de la clase Topico"	| topico |	topico  := self new.	topico titulo: unTitulo  .	topico descripcion: unaDescripcion .	^topico.! !Object subclass: #Usuario	instanceVariableNames: 'nombreApe login clave fechaAlta followerDe topicosDeInteres preguntas respuestas'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial'!!Usuario commentStamp: 'Vic 6/23/2019 18:39' prior: 0!Tecnicas y Herramientas 2019 - TP1 - Red Social CuOOraClase Usuario: Representa a un usuario en la aplicacion.!!Usuario methodsFor: 'Usuario' stamp: 'Vic 7/16/2019 20:58'!obtenerPreguntasRelevantes	"devuelve todas las preguntas relevantes para el usuario"	|pregRelevantes |	pregRelevantes := OrderedCollection new.	topicosDeInteres  do: [:a | pregRelevantes addAll: a obtenerPreguntas  ]. 	followerDe do: [:a | pregRelevantes addAll: a obtenerTodasLasPreguntas   ]. 		^ pregRelevantes. ! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 7/20/2019 18:50'!calificarEntrada: unaEntrada calificacion: unaCalificacion	"Califica una entrada de forma positiva o negativa"	|calif|		calif := Voto voto: unaCalificacion  usuario: self entrada:unaEntrada .  	 unaEntrada agregarVoto: calif.	^calif.! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 7/22/2019 13:57'!borrarPregunta: unaPregunta	"Borra un pregunta realizada por el usuario"(unaPregunta usuario  =  self)  		ifFalse:  [ ^self error:  'El el usuario no es el creador de la pregunta'.  ].		unaPregunta borrarRespuestas .	 preguntas remove: unaPregunta .		^'Pregunta borrada correctamente'.! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 6/29/2019 18:21'!responderPregunta: unaPregunta descripcion: unaDescripcion	"Responde una pregunta"	|resp|	resp := Respuesta pregunta: unaPregunta usuario: self descripcion: unaDescripcion .	^resp.! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 6/29/2019 19:06'!obtenerRespuestas 	"devuelve todas las respuestas que realizo el usuario"	^respuestas . ! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 6/29/2019 19:07'!agregarFollowerDe: unUsuario	"Registra un usuario como follower de otro"	(unUsuario  = self)  		ifTrue:   [ ^self error:  'Un usuario no puede ser follower de si mismo'.  ].	 (followerDe includes: unUsuario) 		ifTrue:   [ ^self error:  'El usuario ',self nombreApe,' ya es seguidor de ',unUsuario nombreApe .  ].			followerDe add: unUsuario! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 6/29/2019 19:07'!agregarTopicosDeInteres: unTopico	"agrega un topico de interes a un usuario"			 (topicosDeInteres includes: unTopico) 		ifTrue:   [ ^self error:  'El usuario ',self nombreApe,' ya es tiene cargado el topico ',unTopico titulo .  ].								topicosDeInteres add: unTopico .! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 6/29/2019 19:07'!obtenerTodasLasPreguntas	"devuelve todas las preguntas que realizo el usuario"	^preguntas. ! !!Usuario methodsFor: 'Usuario' stamp: 'Vic 6/29/2019 19:21'!realizarPregunta: unaDescripcion titulo: unTitulo  topico: unTopico	"Genera una nueva pregunta"	|preg|	preg := Pregunta descripcion: unaDescripcion usuario: self titulo: unTitulo topico: unTopico.		^preg.! !!Usuario methodsFor: 'initialization' stamp: 'Victor 6/3/2019 22:17'!initialize 	"initialize de clase Usuario"	nombreApe := ''. 	login := ''.  	clave :=''.	fechaAlta := DateAndTime now.	followerDe  := OrderedCollection new.	topicosDeInteres  := OrderedCollection new.	preguntas   := OrderedCollection new.	respuestas   := OrderedCollection new.! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/26/2019 16:49'!topicosDeInteres	^ topicosDeInteres! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/26/2019 16:48'!login	^ login! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/26/2019 16:48'!fechaAlta	^ fechaAlta! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/26/2019 16:40'!nombreApe	"getter de nombreApe"	^ nombreApe  .! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/26/2019 16:47'!clave	"getter de clave"	^clave .! !!Usuario methodsFor: 'accessing' stamp: 'Vic 7/20/2019 19:29'!agregarRespuesta:  anObject	respuestas add:  anObject. ! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/24/2019 22:19'!nombreApe: unNombre	"setter de nombreApe"	nombreApe := unNombre .! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/24/2019 22:30'!clave: unaClave	"setter de clave"	clave := unaClave .! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/26/2019 16:48'!followerDe	^ followerDe! !!Usuario methodsFor: 'accessing' stamp: 'Victor 5/24/2019 22:21'!login: unLogin	"setter de login"	login := unLogin .! !!Usuario methodsFor: 'accessing' stamp: 'Victor 6/3/2019 20:54'!preguntas: anObject	preguntas add:  anObject. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Usuario class	instanceVariableNames: ''!!Usuario class methodsFor: 'initialization' stamp: 'Victor 5/24/2019 22:29'!nombre: unNombre login: unLogin clave: unaClave	"Constructor de la clase Usuario"	| user |	user := self new.	user nombreApe: unNombre .	user login: unLogin .	user clave: unaClave .	^user.! !TestCase subclass: #Voto	instanceVariableNames: 'usuario fecha esPositivo entrada'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial'!!Voto commentStamp: 'Vic 6/23/2019 18:39' prior: 0!Tecnicas y Herramientas 2019 - TP1 - Red Social CuOOraClase Voto: Se utiliza para calificar las preguntas y respuestas.la calificacion puede ser negativa o positiva y suma o resta un punto segun sea el caso.!!Voto methodsFor: 'initialization' stamp: 'Victor 6/9/2019 20:22'!initialize 	"initialize de clase Voto"	esPositivo := false. 	usuario := ''.  	entrada := ''.	fecha := DateAndTime now.	! !!Voto methodsFor: 'accessing' stamp: 'Victor 6/9/2019 22:28'!esPositivo	^ esPositivo! !!Voto methodsFor: 'accessing' stamp: 'Vic 7/1/2019 20:12'!entrada	^entrada ! !!Voto methodsFor: 'accessing' stamp: 'Victor 6/9/2019 20:12'!esPositivo: anObject	esPositivo := anObject! !!Voto methodsFor: 'accessing' stamp: 'Victor 6/9/2019 20:10'!usuario: anObject	usuario := anObject! !!Voto methodsFor: 'accessing' stamp: 'Vic 7/1/2019 20:10'!usuario	^ usuario ! !!Voto methodsFor: 'accessing' stamp: 'Vic 7/1/2019 20:10'!fecha	^ fecha  ! !!Voto methodsFor: 'accessing' stamp: 'Victor 6/9/2019 20:25'!entrada: anObject	entrada := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Voto class	instanceVariableNames: ''!!Voto class methodsFor: 'initalization' stamp: 'Vic 7/1/2019 19:15'!voto: votoPostivo usuario:unUsuario entrada:unaEntrada	"Constructor de  clase Voto"	| voto |		"(unUsuario  isMemberOf: Usuario)  	 ifFalse:  [ ^self error:  'El objeto enviado no es una instancia de la clase Usuario'.  ].	 (unaEntrada   isKindOf: Entrada)  	 ifFalse:  [ ^self error:  'El objeto enviado no es una instancia de la clase Entrada'.  ]."			voto := self new.			voto usuario: unUsuario .			voto esPositivo:  votoPostivo .			voto entrada: unaEntrada .			^voto.					  			! !TestCase subclass: #CuOOraTest	instanceVariableNames: 'cuOOra'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-TP1-RedSocial-Test'!!CuOOraTest commentStamp: 'Vic 6/23/2019 18:33' prior: 0!TYH2019 - TP1-Red Social CuOOra Casos de prueba de red social CuOOra.objeto de la clase CuOOra: cuOOra objetos de clase Usuario: u1 u2 u3 objetos de clase Topico: t1 t2 t3 Objetos de clase Pregunta: p1 p2 p3 p4 Objetos de clae Respuesta: r1 r2 r3 r4|cuOOra u1 u2 u3 t1 t2 t3 p1 p2 p3 p4 r1 r2 r3 r4 u4 u5 u6 t4 t5|	cuOOra := CuOOra new.		u1:= Usuario nombre: 'Victor' login: 'vic'  clave: '1234qwer' .	u2:= Usuario nombre: 'Lautaro' login: 'lauti'  clave: '1234qwer' .	u3:= Usuario nombre: 'Santiago' login: 'santi'  clave: '1234qwer'.	u4:= Usuario nombre: 'Rocio' login: 'ro'  clave: '1234qwer'.	u5:= Usuario nombre: 'Julio Sosa' login: 'jsosa'  clave: '1234qwer'.  	u6:= Usuario nombre: 'Roberto Goyeneche' login: 'rgoyeneche'  clave: '1234qwer'. 	t1:= Topico titulo: 'Automovilismo' descrip: 'Todo acerca del deporte motor'.	t2:= Topico titulo: 'Futbol' descrip: 'Solo para charlas futboleras'.	t3:= Topico titulo: 'Programacion' descrip: 'Pregunta lo que quieras de tu lenguaje favorito'.	t4:= Topico titulo: 'Cine' descrip: 'Exclusivo del septimo arte'.	t5:= Topico titulo: 'Musica' descrip: 'Hablemos de tu banda favorita'.	p1:= Pregunta descripcion: 'Como estuvo la ultima carrera de la Formula uno?' usuario: u1 titulo: 'F1' topico: t1.	p2:= Pregunta descripcion: 'Cuando es la proxima carrera del TC?' usuario: u2 titulo: 'TC' 	topico: t1.	p3:= Pregunta descripcion: 'Cuantas carreras gano Prost?' usuario: u2 titulo: 'F1' topico: t1.	p4:= Pregunta descripcion: 'Cuando arranca la copa america?' usuario: u2 titulo: 'Seleccion nacional' topico: t2.		r1:= Respuesta pregunta: p1 usuario: u3  descripcion: 'Estuvo muy buena, fue en Monaco y gano Hamilton'.	r2:= Respuesta pregunta: p1 usuario: u2  descripcion: 'Me gusto pero estuvo mejor la anterior.'.	r3:= Respuesta pregunta: p1 usuario: u2  descripcion: 'Muy mala'.	 Respuesta pregunta: p1 usuario: u4  descripcion: 'Muy muy buena'.		u1 calificarEntrada: r1 calificacion: true.	u2 calificarEntrada: r1 calificacion: true.	u3 calificarEntrada: r1 calificacion: true.	u2 calificarEntrada: r2 calificacion: true.	u4 calificarEntrada: r2 calificacion: true.	u4 calificarEntrada: r3 calificacion: true.	p1 obtenerRespuestas .t1 obtenerPreguntas .t1 preguntas.p1 obtenerRespuestas .u2 obtenerTodasLasPreguntas .u2 obtenerRespuestas .u1 borrarPregunta: p1.u1 calificarEntrada: p1 calificacion: true. u1 calificarEntrada: p2 calificacion: true. u2 calificarEntrada: p2 calificacion: true. u2 calificarEntrada: p1 calificacion: false. TP:Descripcion del dominio de la aplicaci√≥nCuOOra es una red social de preguntas y respuestas. Los usuarios pueden crear ambas cosas (es decir, crear nuevas preguntas o crear respuestas para preguntas de otros usuarios), como asi tambien votarlas mediante mecanismo de like/dislike. Las preguntas deben pertenecer al menos a un topico.A traves de CuOOra deben poder realizarse las siguientes funcionalidades:(LISTO) Crear un nuevo usuario: indicando su nombre de usuario, contrase√±a. Debe registrarse fecha y hora de creacion de la cuenta. (LISTO) Agregar topicos: indicando su nombre y descripcion.(LISTO) Agregar pregunta: indicando los topicos a las que se relaciona (al menos uno), un titulo, una descripcion de la pregunta. Debe registrarse el usuario que la realiza y hora y fecha de creacion.(LISTO) Agregar una respuesta: se indica pregunta que se responde, el texto de la respuesta, hora y fecha de creacion. Debe registrarse el usuario que la realiza.(LISTO) Agregar un usuario como follower de otro.(LISTO) Registrar Like/Dislikes a preguntas y respuestas: ademos se indica el usuario que realiza esa accion y debe saberse el momento en el que realizo la accion.(LISTO) Registrar un topico de interos para un usuario determinado.(lISTO) Obtener todas las preguntas de un topico: se indica un topico y deben retornarse todas las preguntas que se realizaron y pertenecen a ese topico.? Obtener preguntas relevantes para un usuario determinado: Se considera relevante una pregunta cuando esta pertenece a un topico de interes para el usuario en cuestion o bien cuando fue realizada por alguno de los usuarios que sigue en la red social.(LISTO) Obtener las respuestas a una pregunta: se indica la pregunta y se retornan todas las respuestas ordenadas por cantidad de likes de mayor a menor.(LISTO) Determinar si una respuesta esta entre las mejores respuestas de una pregunta: se considera que entra en este grupo si la cantidad de likes de la respuesta es mayor o igual al promedio de likes de todas las respuestas.(LISTO) Borrar una pregunta: elimina del sistema la pregunta y todas sus respuestas.(LISTO) Conocer las preguntas que realiz√≥ un usuario.(LISTO) Conocer las respuestas que di√≥ un usuario. Tareas:? Dise√±ar una soluci√≥n y documentar con diagrama de clases UML.? Implementar su dise√±o en Pharo.? Dise√±ar e implementar test de unidad para su soluci√≥n.!!CuOOraTest methodsFor: 'running' stamp: 'Vic 6/29/2019 19:49'!testObtenerTodosLosTopicos	"Caso de prueba obtenerTodosLosTopicos"	|topico1 topico2 topico3|		topico1 := Topico titulo: 'Automovilismo' descrip: 'Categoria para hablar de autos'.	topico2 := Topico titulo: 'Futbol' descrip: 'Solo para charlas futboleras'.	topico3 := Topico titulo: 'Programacion' descrip: 'Charlemos de tu lenguaje favorito'.		self assert: cuOOra obtenerTodosLosTopicos size equals: 0.		cuOOra agregarTopico: topico1 .	cuOOra agregarTopico: topico2 .	cuOOra agregarTopico: topico3 .		self assert: cuOOra obtenerTodosLosTopicos size equals: 3.			! !!CuOOraTest methodsFor: 'running' stamp: 'Vic 6/29/2019 19:47'!testAgregarTopico	"Caso de prueba agregarTopico"	|topico1 topico2|		topico1 := Topico titulo: 'Automovilismo' descrip: 'Categoria para hablar de autos'.	topico2 := Topico titulo: 'Futbol' descrip: 'Solo para charlas futboleras'.		self assert: cuOOra obtenerTodosLosTopicos size equals: 0.		cuOOra agregarTopico: topico1 .	cuOOra agregarTopico: topico2 .		self assert: cuOOra obtenerTodosLosTopicos size equals: 2.			! !!CuOOraTest methodsFor: 'running' stamp: 'Vic 6/29/2019 19:51'!testObtenerTodosLosUsuarios	"Caso de prueba obtenerTodosLosUsuarios"	|usu1 usu2|	usu1 := Usuario nombre: 'Vic M' login: 'vmartinez' clave: '1234qwer'.	usu2 := Usuario nombre: 'Lauti M' login: 'lmartinez' clave: '1234qwer'.		self assert: cuOOra obtenerTodosLosUsuarios  size equals: 0.		cuOOra agregarUsuario: usu1.	cuOOra agregarUsuario: usu2.		self assert: cuOOra obtenerTodosLosUsuarios  size equals: 2.			! !!CuOOraTest methodsFor: 'running' stamp: 'Vic 6/29/2019 19:45'!testAgregarUsuario	"Caso de prueba agregarUsuario"	|usu1|	usu1 := Usuario nombre: 'Vic M' login: 'vmartinez' clave: '1234qwer'.		self assert: cuOOra obtenerTodosLosUsuarios  size equals: 0.		cuOOra agregarUsuario: usu1.		self assert: cuOOra obtenerTodosLosUsuarios  size equals: 1.			! !!CuOOraTest methodsFor: 'running' stamp: 'Vic 6/29/2019 19:40'!setUp	"Objetos para las pruebas"	super setUp .		cuOOra := CuOOra new.		! !TestCase subclass: #PreguntaTest	instanceVariableNames: 'topico1 usuario usuario2 usuario3'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-TP1-RedSocial-Test'!!PreguntaTest commentStamp: 'Victor 5/30/2019 21:52' prior: 0!TYH2019 - TP1-Red Social CuOOra Casos de prueba para la clase Pregunta!!PreguntaTest methodsFor: 'running' stamp: 'Vic 6/30/2019 22:00'!setUp	"Hooks that subclasses may override to define the fixture of test."	super setUp .	topico1:= Topico titulo: 'Automovilismo' descrip: 'Categoria para hablar de autos'.	usuario  := Usuario nombre: 'Vic M' login: 'vmartinez' clave: '1234qwer'.	usuario2  := Usuario nombre: 'Lauti M' login: 'lmartinez' clave: '1234qwer'.	usuario3  := Usuario nombre: 'Santi M' login: 'smartinez' clave: '1234qwer'.! !!PreguntaTest methodsFor: 'tests' stamp: 'Vic 6/29/2019 15:21'!testPreguntaAlta	"Caso de prueba Alta de Pregunta"	 |preg |	preg := Pregunta descripcion: 'Cuanto sale el litro de nafta?' usuario: usuario titulo: 'Pregunta de Prueba' topico: topico1.		self assert: (preg  isMemberOf: Pregunta ) .	self deny:  preg fechaAlta isNil.	self deny:  preg usuario isNil.	self deny:  preg descripcion isNil.	! !!PreguntaTest methodsFor: 'tests' stamp: 'Vic 6/30/2019 22:05'!testBorrarRespuestas	"Caso de prueba BorrarRespuestas"	 |preg r1 r2 r3 |	preg := Pregunta descripcion: 'Cuanto sale el litro de nafta?' usuario: usuario titulo: 'Pregunta de Prueba' topico: topico1.		r1:= usuario3 responderPregunta: preg descripcion:  'Estuvo muy buena, fue en Monaco y gano Hamilton'. 	r2:= usuario2 responderPregunta: preg descripcion:  'Me gusto pero estuvo mejor la anterior.'. 	r3:= usuario2 responderPregunta: preg descripcion:  'Muy mala'. 		self assert: preg obtenerRespuestas size equals: 3.	preg borrarRespuestas .	self assert: preg obtenerRespuestas size equals: 0.		! !!PreguntaTest methodsFor: 'tests' stamp: 'Vic 6/30/2019 22:19'!testContarVotos	"Caso de prueba ContarVotos, metodo heredado de clase entrada"	| r1 calif calif2 calif3 calif4 pregunta |	pregunta := Pregunta descripcion: 'Como estuvo la ultima carrera?' usuario: usuario titulo: 'F1' topico: topico1.	r1:= usuario3 responderPregunta: pregunta descripcion:  'Estuvo muy buena, fue en Monaco y gano Hamilton'. 	calif := Voto voto: true  usuario: usuario entrada:r1 .  	calif2 := Voto voto: true  usuario: usuario entrada:r1 .  	calif3 := Voto voto: false  usuario: usuario entrada:r1 .  	calif4 := Voto voto: true  usuario: usuario entrada:r1 .  	r1 agregarVoto: calif.	r1 agregarVoto: calif2.	r1 agregarVoto: calif3.	r1 agregarVoto: calif4.	self assert: r1 contarVotos equals: 2 .! !!PreguntaTest methodsFor: 'tests' stamp: 'Vic 6/30/2019 22:18'!testAgregarVoto	"Caso de prueba agregarVoto metodo heredado de clase entrada"	| r1 calif pregunta |	pregunta := Pregunta descripcion: 'Como estuvo la ultima carrera?' usuario: usuario titulo: 'F1' topico: topico1.	r1:= usuario3 responderPregunta: pregunta descripcion:  'Estuvo muy buena, fue en Monaco y gano Hamilton'. 	calif := Voto voto: true  usuario: usuario entrada:r1 .  	r1 agregarVoto: calif.		self assert: r1 contarVotos equals: 1 .! !!PreguntaTest methodsFor: 'tests' stamp: 'Vic 6/30/2019 22:04'!testObtenerRespuestas	"Caso de prueba obtenerRespuestas"	 |preg r1 r2 r3 |	preg := Pregunta descripcion: 'Cuanto sale el litro de nafta?' usuario: usuario titulo: 'Pregunta de Prueba' topico: topico1.		r1:= usuario3 responderPregunta: preg descripcion:  'Estuvo muy buena, fue en Monaco y gano Hamilton'. 	r2:= usuario2 responderPregunta: preg descripcion:  'Me gusto pero estuvo mejor la anterior.'. 	r3:= usuario2 responderPregunta: preg descripcion:  'Muy mala'. 		usuario  calificarEntrada: r1 calificacion: true.	usuario3  calificarEntrada: r1 calificacion: true.	usuario  calificarEntrada: r1 calificacion: true.	usuario2  calificarEntrada: r2 calificacion: true.	usuario3  calificarEntrada: r2 calificacion: true.	usuario2  calificarEntrada: r3 calificacion: true.	self assert: preg obtenerRespuestas size equals: 3.	self assert: preg obtenerRespuestas first equals: r1.	self assert: preg obtenerRespuestas last equals: r3.		! !TestCase subclass: #RespuestaTest	instanceVariableNames: 'topico1 pregunta usuario2 usuario3 usuario'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-TP1-RedSocial-Test'!!RespuestaTest commentStamp: 'Victor 5/30/2019 21:55' prior: 0!TYH2019 - TP1-Red Social CuOOra Casos de prueba para la clase Respuesta!!RespuestaTest methodsFor: 'running' stamp: 'Vic 6/30/2019 19:17'!setUp	"Hooks that subclasses may override to define the fixture of test."	super setUp .	topico1:= Topico titulo: 'Automovilismo' descrip: 'Categoria para hablar de autos'.	usuario  := Usuario nombre: 'Vic M' login: 'vmartinez' clave: '1234qwer'.	usuario2  := Usuario nombre: 'Lauti M' login: 'lmartinez' clave: '1234qwer'.	usuario3  := Usuario nombre: 'Santi M' login: 'smartinez' clave: '1234qwer'.	pregunta := Pregunta descripcion: 'Como estuvo la ultima carrera?' usuario: usuario titulo: 'F1' topico: topico1.	! !!RespuestaTest methodsFor: 'tests' stamp: 'Vic 6/30/2019 20:27'!testEstaEntreLasMejores	"Caso de prueba estaEntreLasMejores"| r1 r2 r3 |r1:= usuario3 responderPregunta: pregunta descripcion:  'Estuvo muy buena, fue en Monaco y gano Hamilton'. r2:= usuario2 responderPregunta: pregunta descripcion:  'Me gusto pero estuvo mejor la anterior.'. r3:= usuario2 responderPregunta: pregunta descripcion:  'Muy mala'. 		usuario  calificarEntrada: r1 calificacion: true.	usuario3  calificarEntrada: r1 calificacion: true.	usuario  calificarEntrada: r1 calificacion: true.	usuario2  calificarEntrada: r2 calificacion: true.	usuario3  calificarEntrada: r2 calificacion: true.	usuario2  calificarEntrada: r3 calificacion: true.	"3 respuestas 6 calificaciones 			promedio 2, respuesta 1: 3 calificaciones positivas						   respuesta 3: 1 calificacion"	self assert: r1 estaEntreLasMejores equals: true .	self assert: r3 estaEntreLasMejores equals: false .! !!RespuestaTest methodsFor: 'tests' stamp: 'Vic 6/30/2019 22:17'!testContarVotos	"Caso de prueba ContarVotos, metodo heredado de clase entrada"	| r1 calif calif2 calif3 calif4 |	r1:= usuario3 responderPregunta: pregunta descripcion:  'Estuvo muy buena, fue en Monaco y gano Hamilton'. 	calif := Voto voto: true  usuario: usuario entrada:r1 .  	calif2 := Voto voto: true  usuario: usuario entrada:r1 .  	calif3 := Voto voto: false  usuario: usuario entrada:r1 .  	calif4 := Voto voto: true  usuario: usuario entrada:r1 .  	r1 agregarVoto: calif.	r1 agregarVoto: calif2.	r1 agregarVoto: calif3.	r1 agregarVoto: calif4.	self assert: r1 contarVotos equals: 2 .! !!RespuestaTest methodsFor: 'tests' stamp: 'Vic 6/30/2019 22:17'!testAgregarVoto	"Caso de prueba agregarVoto metodo heredado de clase entrada"	| r1 calif |	r1:= usuario3 responderPregunta: pregunta descripcion:  'Estuvo muy buena, fue en Monaco y gano Hamilton'. 	calif := Voto voto: true  usuario: usuario entrada:r1 .  	r1 agregarVoto: calif.		self assert: r1 contarVotos equals: 1 .! !!RespuestaTest methodsFor: 'tests' stamp: 'Vic 6/30/2019 19:24'!testRespuestaAlta	"Caso de prueba Alta de Respuesta"	 |resp |	resp := Respuesta pregunta: pregunta usuario: usuario descripcion: 'Por ahora $42'.		self assert: (resp  isMemberOf: Respuesta ) .	self assert: pregunta notNil .	self deny:  resp fechaAlta isNil.	self deny:  resp usuario isNil.	self deny:  resp descripcion isNil.! !TestCase subclass: #TopicoTest	instanceVariableNames: 'topico2'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-TP1-RedSocial-Test'!!TopicoTest commentStamp: 'Victor 5/26/2019 17:57' prior: 0!TYH2019 - TP1-Red Social CuOOra Casos de prueba para la clase Topico!!TopicoTest methodsFor: 'tests' stamp: 'Vic 6/28/2019 20:55'!testObtenerPreguntas	"Caso de prueba obtener preguntas de un topico"	self assert: topico2 obtenerPreguntas size equals: 2.! !!TopicoTest methodsFor: 'tests' stamp: 'Vic 6/28/2019 20:56'!testTopicoAlta	"Caso de prueba Alta de Topico"	|topico1|	topico1:= Topico titulo: 'Futbol' descrip: 'Solo charlas futboleras'.	self assert: topico1 titulo equals: 'Futbol'.	self assert: topico1 descripcion equals: 'Solo charlas futboleras'.	self assert: topico1 preguntas size equals: 0.! !!TopicoTest methodsFor: 'running' stamp: 'Vic 6/28/2019 21:07'!setUp	"Hooks that subclasses may override to define the fixture of test."		|preg1 preg2 u1|	super setUp .	topico2:= Topico titulo: 'Automovilismo' descrip: 'Categoria para hablar de autos'.		u1:= Usuario nombre: 'Victor' login: 'vic'  clave: '1234qwer' .	preg1:= Pregunta descripcion: 'Como estuvo la ultima carrera de la Formula uno?' usuario: u1 titulo: 'F1' topico: topico2 .	preg2:= Pregunta descripcion: 'Cuando es la proxima carrera del TC?' usuario: u1 titulo: 'TC' 	topico: topico2 .! !TestCase subclass: #UsuarioTest	instanceVariableNames: 'topico1 topico2 topico3 topico4 topico5 topico6 usu1 usu2 usu3'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-TP1-RedSocial-Test'!!UsuarioTest commentStamp: 'Victor 5/26/2019 16:43' prior: 0!TYH2019 - TP1-Red Social CuOOra Casos de prueba para la clase Usuario!!UsuarioTest methodsFor: 'tests' stamp: 'Vic 7/22/2019 14:42'!testObtenerPreguntasRelevantes	"Caso de prueba obtenerPreguntasRelevantes"		usu1 agregarFollowerDe: usu2.	usu1 agregarTopicosDeInteres: topico4 .	usu1 agregarTopicosDeInteres: topico5 .		usu1 realizarPregunta: 'Como estuvo la ultima carrera de la F1?' titulo: 'F1'  topico: topico1.	usu2 realizarPregunta: 'Cuando es la final de la copa?' titulo: 'Copa America'  topico: topico2.	usu3 realizarPregunta: 'quieen es Iron Man' titulo: 'Marvel'  topico: topico3.	usu3 realizarPregunta: 'cuando sale el FIFA 20?' titulo: 'No puedo esperar'  topico: topico4.	usu3 realizarPregunta: 'para que sirve el ; en java' titulo: 'No se programar'  topico: topico5.		self assert: usu1 obtenerPreguntasRelevantes size equals: 3.	self assert: (usu1 obtenerPreguntasRelevantes first isMemberOf: Pregunta) .	! !!UsuarioTest methodsFor: 'tests' stamp: 'Vic 7/22/2019 14:48'!testObtenerTodasLasPreguntas	"Caso de prueba obtenerTodasLasPreguntas"	usu1 realizarPregunta: 'Como estuvo la ultima carrera de la F1?' titulo: 'F1'  topico: topico1.	usu1 realizarPregunta: 'Cuando es la final de la copa?' titulo: 'Copa America'  topico: topico2.	usu1 realizarPregunta: 'donde juega Messi?' titulo: 'Duda existencial'  topico: topico2.	usu1 realizarPregunta: 'para que sirve el ; en java' titulo: 'No se programar'  topico: topico6.	usu2 realizarPregunta: 'cual es el mejor lenguaje?' titulo: 'programando'  topico: topico6.		self assert: usu1 obtenerTodasLasPreguntas  size equals: 4.	self assert: usu2 obtenerTodasLasPreguntas  size equals: 1.! !!UsuarioTest methodsFor: 'tests' stamp: 'Vic 7/22/2019 15:15'!testAgregarTopicosDeInteres	"Caso de prueba agregarTopicosDeInteres"	usu1 agregarTopicosDeInteres: topico1 .	usu1 agregarTopicosDeInteres: topico2 .		self assert: usu1 topicosDeInteres  size equals: 2. 	self should: [ usu1 agregarTopicosDeInteres: topico1 ] raise: Error .! !!UsuarioTest methodsFor: 'tests' stamp: 'Vic 7/21/2019 21:12'!testAgregarFollowerDe	"Caso de prueba agregarFollowerDe"		self should: [ usu1 agregarFollowerDe: usu1 ] raise: Error .	usu1 agregarFollowerDe: usu2.	self assert: usu1 followerDe size equals: 1.	self should: [ usu1 agregarFollowerDe: usu2 ] raise: Error .	! !!UsuarioTest methodsFor: 'tests' stamp: 'Vic 6/29/2019 18:56'!testUsuarioAlta	"Caso de prueba Alta de usuario"	self assert: usu1 nombreApe equals: 'Vic M'.	self assert: usu1 login equals: 'vmartinez'.	self assert: usu1 clave equals: '1234qwer'.	self deny: usu1 fechaAlta isNil.	self assert: usu1 followerDe size equals: 0.	self assert: usu1 topicosDeInteres size equals: 0.	self assert: usu1 obtenerTodasLasPreguntas  size equals: 0.	self assert: usu1 obtenerRespuestas size equals: 0.! !!UsuarioTest methodsFor: 'tests' stamp: 'Vic 6/30/2019 19:31'!testCalificarEntrada	"Caso de prueba calificarEntrada"	|preg resp|		preg := usu1 realizarPregunta: 'Como estuvo la ultima carrera de la F1?' titulo: 'F1'  topico: topico1.	resp := usu1 responderPregunta: preg descripcion:  'muy buena!!' .		self assert: preg contarVotos equals: 0.	usu3 calificarEntrada: preg calificacion: true.	usu3 calificarEntrada: resp calificacion: true.	usu2 calificarEntrada: resp calificacion: true.	self assert: preg contarVotos equals: 1.	self assert: resp contarVotos equals: 2.! !!UsuarioTest methodsFor: 'tests' stamp: 'Vic 6/29/2019 19:05'!testRealizarPregunta	"Caso de prueba Realizar Pregunta"| preg |	preg := usu1 realizarPregunta: 'Como estuvo la ultima carrera de la F1?' titulo: 'F1'  topico: topico1.	self assert: (preg  isMemberOf: Pregunta ).	self assert: usu1 obtenerTodasLasPreguntas size equals: 1.	! !!UsuarioTest methodsFor: 'tests' stamp: 'Vic 7/22/2019 13:58'!testBorrarPregunta	"Caso de prueba Borrar Pregunta"| preg |	preg := usu3 realizarPregunta: 'Como estuvo la ultima carrera de la F1?' titulo: 'F1'  topico: topico1.	self assert: (preg  isMemberOf: Pregunta ).	self assert: usu3 obtenerTodasLasPreguntas size equals: 1.	self should: [ usu2 borrarPregunta: preg ] raise: Error .	usu3 borrarPregunta: preg.	self assert: usu3 obtenerTodasLasPreguntas size equals: 0.	! !!UsuarioTest methodsFor: 'tests' stamp: 'Vic 6/29/2019 19:10'!testObtenerRespuestas	"Caso de prueba obtenerRespuestas"| preg1 preg2 resp |	preg1 := usu1 realizarPregunta: 'Como estuvo la ultima carrera de la F1?' titulo: 'F1'  topico: topico1.	preg2 := usu1 realizarPregunta: 'Donde corre el TC?' titulo: 'TC'  topico: topico1.	resp := usu2 responderPregunta: preg1 descripcion:'Una carrera excelente, emocionante de punta a punta' .	resp := usu2 responderPregunta: preg2 descripcion:'En Olavarria' .		self assert: usu2 obtenerRespuestas size equals: 2.	! !!UsuarioTest methodsFor: 'tests' stamp: 'Vic 7/22/2019 14:54'!testResponderPregunta	"Caso de prueba Responder Pregunta"| preg resp |	preg := usu1 realizarPregunta: 'Como estuvo la ultima carrera de la F1?' titulo: 'F1'  topico: topico1.	self assert: preg obtenerRespuestas size equals: 0  .	resp := usu2 responderPregunta: preg descripcion:'Una carrera excelente, emocionante de punta a punta' .	self assert: (resp  isMemberOf: Respuesta  ).	self assert: preg obtenerRespuestas size equals:  1 .! !!UsuarioTest methodsFor: 'running' stamp: 'Vic 6/29/2019 19:22'!setUp	"Hooks that subclasses may override to define the fixture of test."		super setUp.	topico1 := Topico titulo: 'Automovilismo' descrip: 'Categoria para hablar de autos'.	topico2 := Topico titulo: 'Futbol' descrip: 'Solo para charlas futboleras'.	topico3 := Topico titulo: 'Cine' descrip: 'Todo acerca del cine'.	topico4 := Topico titulo: 'Juegos' descrip: 'lo ultimo sobre videojuegos'.	topico5 := Topico titulo: 'Musica' descrip: 'Hablemos de tu banda favorita'.	topico6 := Topico titulo: 'Programacion' descrip: 'Pregunta lo que quieras de tu lenguaje favorito'.	usu1 := Usuario nombre: 'Vic M' login: 'vmartinez' clave: '1234qwer'.	usu2 := Usuario nombre: 'Lauti M' login: 'lmartinez' clave: '1234qwer'.	usu3 := Usuario nombre: 'Santi M' login: 'smartinez' clave: '1234qwer'.! !TestCase subclass: #VotoTest	instanceVariableNames: 'topico2 usuario pregunta'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-RedSocial-TP1-RedSocial-Test'!!VotoTest commentStamp: 'Vic 7/1/2019 20:04' prior: 0!TYH2019 - TP1-Red Social CuOOra Casos de prueba para la clase Voto!!VotoTest methodsFor: 'initialization' stamp: 'Vic 7/1/2019 20:05'!setUp	"Hooks that subclasses may override to define the fixture of test."		super setUp .	topico2:= Topico titulo: 'Automovilismo' descrip: 'Categoria para hablar de autos'.		usuario:= Usuario nombre: 'Victor' login: 'vic'  clave: '1234qwer' .	pregunta:= Pregunta descripcion: 'Como estuvo la ultima carrera de la Formula uno?' usuario: usuario titulo: 'F1' topico: topico2 .! !!VotoTest methodsFor: 'initialization' stamp: 'Vic 7/1/2019 20:12'!testVotoAlta	"Caso de prueba Alta de Voto"	|voto1|	voto1 := Voto voto: true  usuario: usuario entrada:pregunta  .	self assert: voto1 esPositivo  equals: true.	self assert: voto1  usuario equals: usuario.	self assert: voto1 entrada equals: pregunta.	self assert: voto1 fecha notNil .! !